PROBLEM TITLE : Common in 3 Sorted Array
PROBLEM DIFFICULTY : Easy
PLATFORM NAME : GeeksForGeeks
PROBLEM LINK : https://www.geeksforgeeks.org/problems/common-elements1132/1

SOLUTION : 

class Solution 
{
    public List<Integer> commonElements(List<Integer> arr1, List<Integer> arr2, List<Integer> arr3) 
    {
        int i = 0, j = 0, k = 0;
        List<Integer> common = new ArrayList<>();

        if (arr1.isEmpty() || arr2.isEmpty() || arr3.isEmpty()) 
        {
            return common;
        }

        while (i < arr1.size() && j < arr2.size() && k < arr3.size()) 
        {
            if (arr1.get(i).equals(arr2.get(j)) && arr2.get(j).equals(arr3.get(k))) 
            {
                common.add(arr1.get(i));
                i++;
                j++;
                k++;
                while (i < arr1.size() && arr1.get(i).equals(arr1.get(i - 1))) i++;
                while (j < arr2.size() && arr2.get(j).equals(arr2.get(j - 1))) j++;
                while (k < arr3.size() && arr3.get(k).equals(arr3.get(k - 1))) k++;
            } 
            else if (arr1.get(i) < arr2.get(j)) 
            {
                i++;
            } 
            else if (arr2.get(j) < arr3.get(k)) 
            {
                j++;
            }
            else 
            {
                k++;
            }
        }
        return common;
    }
}

APPROACH :
Here, I have used Three Pointer Approach.
If any of the three arrays is empty, then we'll return an empty ArrayList.
Otherwise, we'll do the rest.
