PROBLEM TITLE : Kadane's Algorithm
PROBLEM DIFFICULTY : Medium
PLATFORM NAME : GeeksForGeeks
PROBLEM LINK : https://www.geeksforgeeks.org/problems/kadanes-algorithm-1587115620/1

SOLUTION : 

class Solution 
{
    int maxSubarraySum(int[] arr) 
    {
        int maxSum = Integer.MIN_VALUE;
        int currSum = 0;
        
        for(int i=0; i<arr.length; i++)
        {
            currSum = currSum + arr[i];
            
            if(currSum > maxSum)
            {
                maxSum = currSum;
            }
            if(currSum < 0)
            {
                currSum = 0;
            }
        }
        
        return maxSum;
    }
}

APPROACH :
Here, I have used 2 integer variables to track overall maximum Sum and current Sum.
After that, for each iteration, if currSum is greater than maxSum, then currSum will become maxSum. But, if it's less than 0, then currSum will become 0.
Hence, it will give us Maximum Subarray sum.
