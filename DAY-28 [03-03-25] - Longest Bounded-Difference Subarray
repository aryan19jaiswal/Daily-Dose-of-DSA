PROBLEM TITLE : Longest Bounded-Difference Subarray
PROBLEM DIFFICULTY : Medium
PLATFORM NAME : GeeksForGeeks
PROBLEM LINK : https://www.geeksforgeeks.org/problems/longest-bounded-difference-subarray/1

SOLUTION : [Time Complexity: O(n), Space Complexity: O(n)]

class Solution 
{
    public ArrayList<Integer> longestSubarray(int[] arr, int x)
    {
        Deque<Integer> minQ = new LinkedList<>();
        Deque<Integer> maxQ = new LinkedList<>();
        
        int n = arr.length;
        int start = 0, end = 0;
        int resStart = 0, resEnd = 0;
        
        while(end<n)
        {
            while(!minQ.isEmpty() && arr[minQ.peekLast()] > arr[end])
            {
                minQ.pollLast();
            }
            while(!maxQ.isEmpty() && arr[maxQ.peekLast()] < arr[end])
            {
                maxQ.pollLast();
            }
            
            minQ.addLast(end);
            maxQ.addLast(end);
            
            while(arr[maxQ.peekFirst()] - arr[minQ.peekFirst()] > x)
            {
                if(start == minQ.peekFirst())
                {
                    minQ.pollFirst();
                }
                if(start == maxQ.peekFirst())
                {
                    maxQ.pollFirst();
                }
                start++;
            }
            
            if(end - start > resEnd - resStart)
            {
                resStart = start;
                resEnd = end;
            }
            
            end++;
        }
        
        ArrayList<Integer> ans = new ArrayList<>();
        for(int i=resStart; i<=resEnd; i++)
        {
            ans.add(arr[i]);
        }
        
        return ans;
    }
}
