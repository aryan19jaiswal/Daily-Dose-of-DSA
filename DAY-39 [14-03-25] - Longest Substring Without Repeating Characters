PROBLEM TITLE : Longest Substring Without Repeating Characters
PROBLEM DIFFICULTY : Medium
PLATFORM NAME : LeetCode (3)
PROBLEM LINK : https://leetcode.com/problems/longest-substring-without-repeating-characters/description/

SOLUTION : [Time Complexity: O(n), Space Complexity: O(1)]

class Solution 
{
    public int lengthOfLongestSubstring(String s) 
    {
        // Edge case: if the string is empty, return 0
        if (s.length() == 0) 
        {
            return 0;
        }

        // HashSet to store unique characters in the current window
        HashSet<Character> hs = new HashSet<>();
        int ans = 0;
        int left = 0;  // Left pointer to maintain the window

        // Iterate through the string using the right pointer
        for (int right = 0; right < s.length(); right++) 
        {
            // If character at 'right' is already in the HashSet, shrink the window from the left
            while (hs.contains(s.charAt(right))) 
            {
                hs.remove(s.charAt(left));
                left++;  // Move the left pointer to the right
            }

            // Add the current character to the HashSet
            hs.add(s.charAt(right));

            // Update the answer with the maximum length found
            ans = Math.max(ans, right - left + 1);
        }

        return ans;
    }
}
