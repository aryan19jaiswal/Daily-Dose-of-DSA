PROBLEM TITLE : Maximum of minimum for every window size
PROBLEM DIFFICULTY : Hard
PLATFORM NAME : GeeksForGeeks
PROBLEM LINK : https://www.geeksforgeeks.org/problems/maximum-of-minimum-for-every-window-size3453/1

SOLUTION : [Time Complexity: O(n), Space Complexity: O(n)]

class Solution
{
    public ArrayList<Integer> maxOfMins(int[] arr) 
    {
        int n = arr.length;
        int[] left = new int[n];  // Stores index of previous smaller element
        int[] right = new int[n]; // Stores index of next smaller element
        int[] answer = new int[n + 1]; // To store max of min for each window size

        Stack<Integer> stack = new Stack<>();

        // Compute the previous smaller element index
        for (int i = 0; i < n; i++) 
        {
            while (!stack.isEmpty() && arr[stack.peek()] >= arr[i]) 
            {
                stack.pop();
            }
            left[i] = stack.isEmpty() ? -1 : stack.peek();
            stack.push(i);
        }

        stack.clear();

        // Compute the next smaller element index
        for (int i = n - 1; i >= 0; i--) 
        {
            while (!stack.isEmpty() && arr[stack.peek()] >= arr[i]) 
            {
                stack.pop();
            }
            right[i] = stack.isEmpty() ? n : stack.peek();
            stack.push(i);
        }

        // Fill answer array where answer[length] stores the max of min for that window length
        for (int i = 0; i < n; i++) 
        {
            int windowSize = right[i] - left[i] - 1; // Effective window size where arr[i] is min
            answer[windowSize] = Math.max(answer[windowSize], arr[i]); // Max of min values
        }

        // Fill remaining values from right to left
        for (int i = n - 1; i >= 1; i--) 
        {
            answer[i] = Math.max(answer[i], answer[i + 1]);
        }

        // Convert result to ArrayList
        ArrayList<Integer> res = new ArrayList<>();
        for (int i = 1; i <= n; i++) 
        {
            res.add(answer[i]);
        }

        return res;
    }
}
